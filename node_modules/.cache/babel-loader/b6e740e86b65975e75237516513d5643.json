{"ast":null,"code":"export class Api {\n  constructor(options) {\n    this._baseURL = options.baseURL;\n    this._headers = options.headers;\n    this._checkResponse = this._checkResponse.bind(this);\n  }\n\n  _checkResponse(response) {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(`${response.status} and ${response.url}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseURL}users/me`, {\n      method: 'GET',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-type': 'application/json'\n      }\n    }).then(this._checkResponse);\n  }\n\n  getPreloadsCards() {\n    return fetch(`${this._baseURL}cards/`, {\n      method: 'GET',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-type': 'application/json'\n      }\n    }).then(this._checkResponse);\n  }\n\n  updateUserInfo(_ref) {\n    let {\n      fio,\n      aboutYourself\n    } = _ref;\n    return fetch(`${this._baseURL}users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: `${fio}`,\n        about: `${aboutYourself}`\n      })\n    }).then(this._checkResponse);\n  }\n\n  postCard(_ref2) {\n    let {\n      name,\n      link\n    } = _ref2;\n    return fetch(`${this._baseURL}cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: `${name}`,\n        link: `${link}`\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(_id) {\n    return fetch(`${this._baseURL}cards/${_id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-type': 'application/json'\n      }\n    }).then(this._checkResponse);\n  }\n\n  addLike(_id) {\n    return fetch(`${this._baseURL}cards/likes/${_id}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-type': 'application/json'\n      }\n    }).then(this._checkResponse);\n  }\n\n  deleteLike(_id) {\n    return fetch(`${this._baseURL}cards/likes/${_id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-type': 'application/json'\n      }\n    }).then(this._checkResponse);\n  }\n\n  updateAvatar(_ref3) {\n    let {\n      avatar\n    } = _ref3;\n    return fetch(`${this._baseURL}users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: `${avatar}`\n      })\n    }).then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(_id, isLiked) {\n    if (isLiked) {\n      return this.addLike(_id);\n    }\n\n    return this.deleteLike(_id);\n  }\n\n}\nexport const api = new Api({\n  baseURL: 'https://mesto.nomoreparties.co/v1/cohort-29/',\n  headers: {\n    authorization: 'ea8d3eb3-1ee8-45d9-8e72-76d5b1d1c389',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["/home/dmitriy/WebstormProjects/react-mesto-auth/src/utils/Api.js"],"names":["Api","constructor","options","_baseURL","baseURL","_headers","headers","_checkResponse","bind","response","ok","json","Promise","reject","status","url","getUserInfo","fetch","method","authorization","then","getPreloadsCards","updateUserInfo","fio","aboutYourself","body","JSON","stringify","name","about","postCard","link","deleteCard","_id","addLike","deleteLike","updateAvatar","avatar","changeLikeCardStatus","isLiked","api"],"mappings":"AAAA,OAAO,MAAMA,GAAN,CAAU;AACbC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,QAAL,GAAgBD,OAAO,CAACE,OAAxB;AACA,SAAKC,QAAL,GAAgBH,OAAO,CAACI,OAAxB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACH;;AAEDD,EAAAA,cAAc,CAACE,QAAD,EAAU;AACpB,QAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAgB,GAAEJ,QAAQ,CAACK,MAAO,QAAOL,QAAQ,CAACM,GAAI,EAAtD,CAAP;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,WAAOC,KAAK,CAAE,GAAE,KAAKd,QAAS,UAAlB,EACR;AACIe,MAAAA,MAAM,EAAE,KADZ;AAEIZ,MAAAA,OAAO,EAAE;AACLa,QAAAA,aAAa,EAAE,KAAKd,QAAL,CAAcc,aADxB;AAEL,wBAAgB;AAFX;AAFb,KADQ,CAAL,CAOAC,IAPA,CAOK,KAAKb,cAPV,CAAP;AAQH;;AAEDc,EAAAA,gBAAgB,GAAE;AACd,WAAOJ,KAAK,CAAE,GAAE,KAAKd,QAAS,QAAlB,EACR;AACIe,MAAAA,MAAM,EAAE,KADZ;AAEIZ,MAAAA,OAAO,EAAE;AACLa,QAAAA,aAAa,EAAE,KAAKd,QAAL,CAAcc,aADxB;AAEL,wBAAgB;AAFX;AAFb,KADQ,CAAL,CAOAC,IAPA,CAOK,KAAKb,cAPV,CAAP;AAQH;;AAIDe,EAAAA,cAAc,OAAsB;AAAA,QAArB;AAACC,MAAAA,GAAD;AAAMC,MAAAA;AAAN,KAAqB;AAChC,WAAOP,KAAK,CAAE,GAAE,KAAKd,QAAS,UAAlB,EAA6B;AACrCe,MAAAA,MAAM,EAAE,OAD6B;AAErCZ,MAAAA,OAAO,EAAE;AACLa,QAAAA,aAAa,EAAE,KAAKd,QAAL,CAAcc,aADxB;AAEL,wBAAgB;AAFX,OAF4B;AAMrCM,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAChBC,QAAAA,IAAI,EAAE,GAAEL,GAAI,EADI;AAEhBM,QAAAA,KAAK,EAAG,GAAEL,aAAc;AAFR,OAAf;AANgC,KAA7B,CAAL,CAUJJ,IAVI,CAUC,KAAKb,cAVN,CAAP;AAWH;;AAEDuB,EAAAA,QAAQ,QAAc;AAAA,QAAb;AAACF,MAAAA,IAAD;AAAOG,MAAAA;AAAP,KAAa;AAClB,WAAQd,KAAK,CAAE,GAAE,KAAKd,QAAS,OAAlB,EAA0B;AACnCe,MAAAA,MAAM,EAAE,MAD2B;AAEnCZ,MAAAA,OAAO,EAAC;AACJa,QAAAA,aAAa,EAAE,KAAKd,QAAL,CAAcc,aADzB;AAEJ,wBAAgB;AAFZ,OAF2B;AAMnCM,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAChBC,QAAAA,IAAI,EAAE,GAAEA,IAAK,EADG;AAEhBG,QAAAA,IAAI,EAAE,GAAEA,IAAK;AAFG,OAAf;AAN8B,KAA1B,CAAL,CAULX,IAVK,CAUA,KAAKb,cAVL,CAAR;AAWH;;AACDyB,EAAAA,UAAU,CAACC,GAAD,EAAK;AACX,WAAOhB,KAAK,CAAE,GAAE,KAAKd,QAAS,SAAQ8B,GAAI,EAA9B,EAAiC;AACzCf,MAAAA,MAAM,EAAC,QADkC;AAEzCZ,MAAAA,OAAO,EAAC;AACJa,QAAAA,aAAa,EAAE,KAAKd,QAAL,CAAcc,aADzB;AAEJ,wBAAgB;AAFZ;AAFiC,KAAjC,CAAL,CAMJC,IANI,CAMC,KAAKb,cANN,CAAP;AAOH;;AAED2B,EAAAA,OAAO,CAACD,GAAD,EAAK;AACR,WAAOhB,KAAK,CAAE,GAAE,KAAKd,QAAS,eAAc8B,GAAI,EAApC,EAAuC;AAC/Cf,MAAAA,MAAM,EAAC,KADwC;AAE/CZ,MAAAA,OAAO,EAAC;AACJa,QAAAA,aAAa,EAAE,KAAKd,QAAL,CAAcc,aADzB;AAEJ,wBAAgB;AAFZ;AAFuC,KAAvC,CAAL,CAMJC,IANI,CAMC,KAAKb,cANN,CAAP;AAOH;;AACD4B,EAAAA,UAAU,CAACF,GAAD,EAAK;AACX,WAAOhB,KAAK,CAAE,GAAE,KAAKd,QAAS,eAAc8B,GAAI,EAApC,EAAuC;AAC/Cf,MAAAA,MAAM,EAAC,QADwC;AAE/CZ,MAAAA,OAAO,EAAC;AACJa,QAAAA,aAAa,EAAE,KAAKd,QAAL,CAAcc,aADzB;AAEJ,wBAAgB;AAFZ;AAFuC,KAAvC,CAAL,CAMJC,IANI,CAMC,KAAKb,cANN,CAAP;AAOH;;AACD6B,EAAAA,YAAY,QAAU;AAAA,QAAT;AAACC,MAAAA;AAAD,KAAS;AAClB,WAAOpB,KAAK,CAAE,GAAE,KAAKd,QAAS,iBAAlB,EAAoC;AAC5Ce,MAAAA,MAAM,EAAE,OADoC;AAE5CZ,MAAAA,OAAO,EAAE;AACLa,QAAAA,aAAa,EAAE,KAAKd,QAAL,CAAcc,aADxB;AAEL,wBAAgB;AAFX,OAFmC;AAM5CM,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AACZU,QAAAA,MAAM,EAAG,GAAEA,MAAO;AADN,OAAf;AANuC,KAApC,CAAL,CAUJjB,IAVI,CAUC,KAAKb,cAVN,CAAP;AAWH;;AAED+B,EAAAA,oBAAoB,CAACL,GAAD,EAAMM,OAAN,EAAe;AAC/B,QAAIA,OAAJ,EAAa;AACT,aAAO,KAAKL,OAAL,CAAaD,GAAb,CAAP;AACH;;AACD,WAAO,KAAKE,UAAL,CAAgBF,GAAhB,CAAP;AACH;;AAhHY;AAmHjB,OAAO,MAAMO,GAAG,GAAG,IAAIxC,GAAJ,CAAQ;AAAEI,EAAAA,OAAO,EAAG,8CAAZ;AAA4DE,EAAAA,OAAO,EAAC;AACvFa,IAAAA,aAAa,EAAE,sCADwE;AAEvF,oBAAgB;AAFuE;AAApE,CAAR,CAAZ","sourcesContent":["export class Api {\n    constructor(options) {\n        this._baseURL = options.baseURL;\n        this._headers = options.headers;\n        this._checkResponse = this._checkResponse.bind(this)\n    }\n\n    _checkResponse(response){\n        if(response.ok){\n            return response.json();\n        }\n        return Promise.reject(`${response.status} and ${response.url}`);\n    }\n\n    getUserInfo() {\n        return fetch(`${this._baseURL}users/me`,\n            {\n                method: 'GET',\n                headers: {\n                    authorization: this._headers.authorization,\n                    'Content-type': 'application/json'\n                }\n            }).then(this._checkResponse);\n    }\n\n    getPreloadsCards(){\n        return fetch(`${this._baseURL}cards/`,\n            {\n                method: 'GET',\n                headers: {\n                    authorization: this._headers.authorization,\n                    'Content-type': 'application/json'\n                }\n            }).then(this._checkResponse)\n    }\n\n\n\n    updateUserInfo({fio, aboutYourself}){\n        return fetch(`${this._baseURL}users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._headers.authorization,\n                'Content-type': 'application/json'\n            },\n            body:JSON.stringify({\n                name:`${fio}`,\n                about: `${aboutYourself}`\n            })\n        }).then(this._checkResponse);\n    }\n\n    postCard({name, link}){\n        return  fetch(`${this._baseURL}cards`, {\n            method: 'POST',\n            headers:{\n                authorization: this._headers.authorization,\n                'Content-type': 'application/json'\n            },\n            body:JSON.stringify({\n                name:`${name}`,\n                link:`${link}`\n            })\n        }).then(this._checkResponse);\n    }\n    deleteCard(_id){\n        return fetch(`${this._baseURL}cards/${_id}`, {\n            method:'DELETE',\n            headers:{\n                authorization: this._headers.authorization,\n                'Content-type': 'application/json'\n            }\n        }).then(this._checkResponse);\n    }\n\n    addLike(_id){\n        return fetch(`${this._baseURL}cards/likes/${_id}`, {\n            method:'PUT',\n            headers:{\n                authorization: this._headers.authorization,\n                'Content-type': 'application/json'\n            }\n        }).then(this._checkResponse);\n    }\n    deleteLike(_id){\n        return fetch(`${this._baseURL}cards/likes/${_id}`, {\n            method:'DELETE',\n            headers:{\n                authorization: this._headers.authorization,\n                'Content-type': 'application/json'\n            }\n        }).then(this._checkResponse);\n    }\n    updateAvatar({avatar}){\n        return fetch(`${this._baseURL}users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._headers.authorization,\n                'Content-type': 'application/json'\n            },\n            body:JSON.stringify({\n                    avatar: `${avatar}`\n                }\n            )\n        }).then(this._checkResponse);\n    }\n\n    changeLikeCardStatus(_id, isLiked) {\n        if (isLiked) {\n            return this.addLike(_id);\n        }\n        return this.deleteLike(_id);\n    }\n}\n\nexport const api = new Api({ baseURL : 'https://mesto.nomoreparties.co/v1/cohort-29/', headers:{\n        authorization: 'ea8d3eb3-1ee8-45d9-8e72-76d5b1d1c389',\n        'Content-Type': 'application/json'\n    }});"]},"metadata":{},"sourceType":"module"}